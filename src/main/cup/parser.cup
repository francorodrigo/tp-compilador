package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.*;
import lyc.compiler.model.*;
class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal OPEN_CURLY_BRACES;
terminal CLOSE_CURLY_BRACES;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal CONST_STRING;
terminal FLOAT_CONSTANT;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal INIT;
terminal WRITE;
terminal READ;
terminal NOT;
terminal AND;
terminal OR;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal IGUALES;

terminal COMMA;
terminal COLON;
terminal SEMI_COLON;

terminal FLOAT;
terminal INT;
terminal STRING;


terminal GREATER_THAN;
terminal GREATER_OR_EQUAL_THAN;
terminal LOWER_THAN;
terminal LOWER_OR_EQUAL_THAN;
terminal EQUALS;
terminal NOT_EQUALS;

// Non Terminals
non terminal startRule;
non terminal program;
non terminal decVarSection;
non terminal varFields;
non terminal varList;
non terminal dataType;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal string;
non terminal write;
non terminal read;
non terminal selection;
non terminal iteration;
non terminal conditional;
non terminal comparison;
non terminal comparator;
non terminal case;
non terminal caseWrapper;
non terminal defaultCase;
non terminal iguales;
non terminal expressionList;
non terminal ifHeader;
non terminal comparisonCase;


// Start Symbol Definition
start with startRule;
startRule ::= decVarSection program {:
    TercetoGenerator.getInstance().asignarTerceto("StartRuleIndex","DecVarSectionIndex");
    new AsmCodeGenerator().generarAsm();
    System.out.println("<startRule> => <devVarSection> <program>"); :};
startRule ::= decVarSection {:
    TercetoGenerator.getInstance().asignarTerceto("StartRuleIndex","DecVarSectionIndex");
    System.out.println("<startRule> => <devVarSection>");
:};
decVarSection ::= INIT OPEN_CURLY_BRACES varFields CLOSE_CURLY_BRACES {: System.out.println("<decVarSection> => INIT OPEN_CURLY_BRACES <varFields> CLOSE_CURLY_BRACES"); :};
decVarSection ::= INIT OPEN_CURLY_BRACES CLOSE_CURLY_BRACES {: System.out.println("<decVarSection> => INIT OPEN_CURLY_BRACES CLOSE_CURLY_BRACES"); :};
varFields ::= varFields varList COLON dataType SEMI_COLON
{:
    System.out.println("<varFields> => <varFields> <varList> COLON <dataType> SEMI_COLON");
    String dataType = TercetoGenerator.pilaTipoDato.pop();
    SymbolTableGenerator symbolTableGenerator = new SymbolTableGenerator();
    while(!TercetoGenerator.pilaVariables.isEmpty()){
        String variable = TercetoGenerator.pilaVariables.pop();
        symbolTableGenerator.updateDataType(variable,dataType);
    }
:};
varFields ::= varList COLON dataType SEMI_COLON
{:
    System.out.println("<varFields> => <varList> COLON <dataType> SEMI_COLON");
    String dataType = TercetoGenerator.pilaTipoDato.pop();
    SymbolTableGenerator symbolTableGenerator = new SymbolTableGenerator();
    while(!TercetoGenerator.pilaVariables.isEmpty()){
        String variable = TercetoGenerator.pilaVariables.pop();
        symbolTableGenerator.updateDataType(variable,dataType);
    }
:};
varList ::= IDENTIFIER:id {:
    SymbolTableGenerator stg = new SymbolTableGenerator();
    if(!stg.isUninitialized(id.toString())) {
        throw new AlreadyDeclaredVariableException("La variable: '" + id + "' ya fue declarada");
    }
    TercetoGenerator.pilaVariables.push(id.toString());
    TercetoGenerator.getInstance().crearYAsignarTerceto(id,"VarListIndex");
    System.out.println("<varList> => IDENTIFIER");
:};
varList ::= varList COMMA IDENTIFIER:id
{:
    SymbolTableGenerator stg = new SymbolTableGenerator();
    if(!stg.isUninitialized(id.toString())) {
        throw new AlreadyDeclaredVariableException("La variable: '" + id + "' ya fue declarada");
    }
    TercetoGenerator.pilaVariables.push(id.toString());
    System.out.println("<varList> => <varList> COMMA IDENTIFIER");
:};
dataType ::= INT:type
{:
    TercetoGenerator.pilaTipoDato.push(type.toString());
    System.out.println("<dataType> => INT");
:}
| FLOAT:type
{:
    TercetoGenerator.pilaTipoDato.push(type.toString());
    System.out.println("<dataType> => FLOAT");
:}
| STRING:type
{:
    TercetoGenerator.pilaTipoDato.push(type.toString());
    System.out.println("<dataType> => STRING");
:};
program ::= program sentence {: System.out.println("<program> => <program> <sentence>"); :};
program ::= sentence
{:
    TercetoGenerator.getInstance().asignarTerceto("ProgramIndex","SentenceIndex");
    System.out.println("<program> => <sentence>");
:};

sentence ::= assignment SEMI_COLON
{:
    TercetoGenerator.getInstance().asignarTerceto("SentenceIndex", "AssignmentIndex");
    System.out.println("<sentence> => <assignment> SEMI_COLON");
:};
sentence ::= write SEMI_COLON
{:
    TercetoGenerator.getInstance().asignarTerceto("SentenceIndex", "WriteIndex");
    System.out.println("<sentence> => <write> SEMI_COLON");
:};
sentence ::= read SEMI_COLON
{:
    TercetoGenerator.getInstance().asignarTerceto("SentenceIndex", "ReadIndex");
    System.out.println("<sentence> => <read> SEMI_COLON");
:};
sentence ::= selection
{:
    TercetoGenerator.getInstance().asignarTerceto("SentenceIndex","SelectionIndex");
    System.out.println("<sentence> => <selection>");
:};
sentence ::= iteration
{:
    TercetoGenerator.getInstance().asignarTerceto("SentenceIndex","IterationIndex");
    System.out.println("<sentence> => <iteration>");
:};
sentence ::= case
{:
    TercetoGenerator.getInstance().asignarTerceto("SentenceIndex","CaseIndex");
    System.out.println("<sentence> => <case>");
:};

iteration ::= WHILE OPEN_BRACKET
{:
    TercetoGenerator.pilaIndices.push(TercetoGenerator.tercetos.size());
:}
conditional CLOSE_BRACKET OPEN_CURLY_BRACES
{:
    //Agregamos un branch al final del programa si la condicion fallo.
    TercetoGenerator.getInstance().crearTerceto("CMP","@BoolAux","1");
    int idSalto = TercetoGenerator.getInstance().crearTerceto("BNE","_","_"); //No es 1, fallo la condicion del while
    TercetoGenerator.pilaIndices.push(idSalto);
:}
program
{:
    //Tenemos dos elementos en la pila:
    // 1er pop(). El salto en caso de que la condicion falle
    // 2do pop(). El salto al inicio de la condicion
    //Hay que setear el salto en caso de que la condicion falle hacia afuera del while
    //Hay que agregar un salto incondicional al final del programa del while hacia el inicio de la condicion.
    int idSaltoQueTieneQueIrFueraDelWhile = TercetoGenerator.pilaIndices.pop();
    Terceto t = TercetoGenerator.tercetos.get(idSaltoQueTieneQueIrFueraDelWhile);
    int idxSiguienteLineaDelWhile = TercetoGenerator.tercetos.size() + 1; //Por el BI que agregamos abajo
    t.segundoElemento = "[" + idxSiguienteLineaDelWhile + "]";
    int idPrincipioCondicionWhile = TercetoGenerator.pilaIndices.pop();
    TercetoGenerator.getInstance().crearTerceto("BI","[" + idPrincipioCondicionWhile + "]", "_");
:}CLOSE_CURLY_BRACES {: System.out.println("<iteration> ==> WHILE OPEN_BRACKET <conditional> CLOSE_BRACKET OPEN_CURLY_BRACES <program> CLOSE_CURLY_BRACES"); :};

ifHeader ::= IF OPEN_BRACKET conditional
{:
    TercetoGenerator.getInstance().crearTerceto("CMP","@BoolAux","1");
    int idx = TercetoGenerator.getInstance().crearTerceto("BNE","_","_");
    TercetoGenerator.pilaIndices.push(idx);
:};

selection ::= ifHeader CLOSE_BRACKET OPEN_CURLY_BRACES program CLOSE_CURLY_BRACES ELSE OPEN_CURLY_BRACES
{:
    int id = TercetoGenerator.getInstance().crearTerceto("BI","_","_");
    TercetoGenerator.pilaIndices.push(id);
:}
program CLOSE_CURLY_BRACES
{:
    int id = TercetoGenerator.pilaIndices.pop();
    Terceto tIncondicional = TercetoGenerator.tercetos.get(id);
    tIncondicional.segundoElemento = "[" + TercetoGenerator.tercetos.size() + "]";
    int id2 = TercetoGenerator.pilaIndices.pop();
    Terceto tFalso = TercetoGenerator.tercetos.get(id2);
    tFalso.segundoElemento = "[" + TercetoGenerator.indices.get("ProgramIndex") + "]";
    System.out.println("<selection> ==> IF OPEN_BRACKET <conditional> CLOSE_BRACKET OPEN_CURLY_BRACES <program> CLOSE_CURLY_BRACES ELSE OPEN_CURLY_BRACES <program> CLOSE_CURLY_BRACES");
:};


selection ::= ifHeader CLOSE_BRACKET OPEN_CURLY_BRACES program CLOSE_CURLY_BRACES
{:
    Terceto tFalso = TercetoGenerator.tercetos.get(TercetoGenerator.pilaIndices.pop());
    tFalso.segundoElemento = "[" + TercetoGenerator.tercetos.size() + "]";
    System.out.println("<selection> ==> IF OPEN_BRACKET <conditional> CLOSE_BRACKET OPEN_CURLY_BRACES <program> CLOSE_CURLY_BRACES");
:};

//selection ::= IF OPEN_BRACKET conditional CLOSE_BRACKET OPEN_CURLY_BRACES program CLOSE_CURLY_BRACES {: System.out.println("<selection> ==> IF OPEN_BRACKET <conditional> CLOSE_BRACKET OPEN_CURLY_BRACES <program> CLOSE_CURLY_BRACES"); :};
conditional ::= comparison
{:
    System.out.println("<conditional> ==> comparison");
    TercetoGenerator.getInstance().asignarTerceto("ConditionalIndex","ComparisonIndex");
:};



conditional ::= NOT comparison {:
    /*
    [CMP, @BoolAux, 1] 1
    [BNE, 5, _] 2
    [=, @BoolAux, 1] 3
    [BI, 6, _] 4
    [=, @BoolAux, 0] 5
    [blablabla] 6
    */
    int idxComp = TercetoGenerator.getInstance().crearTerceto("CMP","@BoolAux","1"); // 1
    int idxAux = idxComp + 4; //5
    TercetoGenerator.getInstance().crearTerceto("BEQ","[" + idxAux + "]","0"); // 2
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","1"); // 3
    idxAux++;
    TercetoGenerator.getInstance().crearTerceto("BI","[" + idxAux + "]","0"); // 4
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","0"); // 5

    //TercetoGenerator.getInstance().crearYAsignarTerceto("NOT", TercetoGenerator.getInstance().obtenerTercetoDelENT("ComparisonIndex"),"_","ConditionalIndex");
    System.out.println("NOT <conditional> ==> comparison");
:};
conditional ::= conditional
{:
    //guardamos boolaux
    int idBoolAuxActual = TercetoGenerator.getInstance().crearTerceto("=","@BoolAuxTemp","@BoolAux");
    //TercetoGenerator.pilaIndices.push(idBoolAuxActual);
:} AND comparison
{:
    /*
    [CMP,@BoolAuxTemp,1] 1
    [BNE,6,_] 2 ; El condicional a izquierda dio falso, salimos y dejamos boolAux = 0
    [CMP,@BoolAux,1] 3
    [BNE,6,_] 4 ; El condicional a derecha dio falso, salimos y dejamos boolAux = 0
    [BI,7,_] 5 ; Ambos fueron verdaderos, dejamos boolAux en 1.
    [=,@BoolAux,0] 6 ; Alguno no era 1, el resultado es 0.
    [bla bla bla] 7
    */
    int idxCompIzq = TercetoGenerator.getInstance().crearTerceto("CMP","@BoolAuxTemp","1");
    int idxAux = idxCompIzq + 5;
    TercetoGenerator.getInstance().crearTerceto("BNE","[" + idxAux + "]","_");
    TercetoGenerator.getInstance().crearTerceto("CMP","@BoolAux","1");
    TercetoGenerator.getInstance().crearTerceto("BNE","[" + idxAux + "]","_");
    idxAux++;
    TercetoGenerator.getInstance().crearTerceto("BI","[" + idxAux + "]" , "_");
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","0");
    System.out.println("<conditional> ==> <conditional> AND <comparison>");
:};

conditional ::= conditional
{:
    //traemos boolaux y lo apilamos
    int idBoolAuxActual = TercetoGenerator.getInstance().crearTerceto("=","@BoolAuxTemp","@BoolAux");
    TercetoGenerator.pilaIndices.push(idBoolAuxActual);
:} OR comparison
{:
    /*
    [CMP,@BoolAux,1] 1
    [BNE,4,_] 2
    [BI,7,_] 3 ; BoolAux ya es 1, no hay nada que hacer
    [CMP,@BoolAuxTemp,1] 4
    [BNE,7,_] 5
    [=,@BoolAux,1] 6 ; BoolAux no era 1, pero BoolAuxTemp sí, entonces ponemos a BoolAux en 1.
    [bla bla bla] 7
    */
    //Si boolAux es 1, dejarlo en 1
    int id1 = TercetoGenerator.getInstance().crearTerceto("CMP","@BoolAux","1");

    int idSaltoSiguienteCondicion = TercetoGenerator.tercetos.size()+2;
    TercetoGenerator.getInstance().crearTerceto("BNE","["+idSaltoSiguienteCondicion+"]","_");//Si no es uno, saltar a la comparación de boolAuxTemp

    int idSaltoFinalComparacion = TercetoGenerator.tercetos.size()+3;

    TercetoGenerator.getInstance().crearTerceto("BI","[" + idSaltoFinalComparacion + "]","_"); //Si ya era uno, el OR es verdadero y salimos

    //Si no valia 1, comparamos BoolAuxTemp, que es el BoolAux de la expresion a izquierda del OR.
    int id2 = TercetoGenerator.getInstance().crearTerceto("CMP","@BoolAuxTemp","1");

    idSaltoFinalComparacion = TercetoGenerator.tercetos.size()+2;
    TercetoGenerator.getInstance().crearTerceto("BNE","[" + idSaltoFinalComparacion + "]","_"); //Si NO era 1, ninguno era 1, y salimos.
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","1");
    System.out.println("<conditional> ==> <conditional> OR <comparison>");
:};
comparisonCase ::= expression {:TercetoGenerator.getInstance().apilarIndiceDeTerceto("ExpressionIndex");:} comparator:value expression
{:
    int idExpression2 = TercetoGenerator.indices.get("ExpressionIndex");
    int idExpression1 = TercetoGenerator.pilaIndices.pop();
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","0");
    TercetoGenerator.getInstance().crearYAsignarTerceto("CMP","[" + idExpression1 + "]", "[" + idExpression2 + "]", "ComparisonIndex"); //[CMP, [1], [2]]
    String op = TercetoGenerator.pilaOperadores.pop(); // "<"
    int idComp = TercetoGenerator.getInstance().crearTerceto(TercetoGenerator.operadores.get(op),"_","_"); //[BGE,_,_]
    TercetoGenerator.pilaIndices.push(idComp);
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","1");
    System.out.println("<comparison> ==> <expression> <comparator> <expression>");
:};
//IF A > B
comparisonCase ::= OPEN_BRACKET expression{:TercetoGenerator.getInstance().apilarIndiceDeTerceto("ExpressionIndex");:} comparator expression CLOSE_BRACKET
{:
    int idExpression2 = TercetoGenerator.indices.get("ExpressionIndex");
    int idExpression1 = TercetoGenerator.pilaIndices.pop();
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","0");
    TercetoGenerator.getInstance().crearYAsignarTerceto("CMP","[" + idExpression1 + "]", "[" + idExpression2 + "]", "ComparisonIndex"); //[CMP, [1], [2]]
    String op = TercetoGenerator.pilaOperadores.pop(); // "<"
    int idComp = TercetoGenerator.getInstance().crearTerceto(TercetoGenerator.operadores.get(op),"_","_"); //[BGE,_,_]
    TercetoGenerator.pilaIndices.push(idComp);
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","1");
    System.out.println("<comparison> ==> OPEN_BRACKET <expression> <comparator> <expression> CLOSE_BRACKET");
:};


comparison ::= expression {: TercetoGenerator.getInstance().apilarIndiceDeTerceto("ExpressionIndex"); :} comparator:value expression
{:
    int idExpression2 = TercetoGenerator.indices.get("ExpressionIndex");
    int idExpression1 = TercetoGenerator.pilaIndices.pop();
    int idAux = TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","0");
    TercetoGenerator.getInstance().crearYAsignarTerceto("CMP","[" + idExpression1 + "]", "[" + idExpression2 + "]", "ComparisonIndex"); //[CMP, [1], [2]]
    idAux+=4;
    String op = TercetoGenerator.pilaOperadores.pop(); // "<"
    int idComp = TercetoGenerator.getInstance().crearTerceto(TercetoGenerator.operadores.get(op),"[" + idAux + "]","_"); //BGE
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","1");
    System.out.println("<comparison> ==> <expression> <comparator> <expression>");
:};

comparison ::= OPEN_BRACKET expression {: TercetoGenerator.getInstance().apilarIndiceDeTerceto("ExpressionIndex"); :} comparator expression CLOSE_BRACKET
{:
    int idExpression2 = TercetoGenerator.indices.get("ExpressionIndex");
    int idExpression1 = TercetoGenerator.pilaIndices.pop();
    int idAux = TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","0");
    TercetoGenerator.getInstance().crearYAsignarTerceto("CMP","[" + idExpression1 + "]", "[" + idExpression2 + "]", "ComparisonIndex"); //[CMP, [1], [2]]
    idAux+=4;
    String op = TercetoGenerator.pilaOperadores.pop(); // "<"
    int idComp = TercetoGenerator.getInstance().crearTerceto(TercetoGenerator.operadores.get(op),"[" + idAux + "]","_");
    TercetoGenerator.getInstance().crearTerceto("=","@BoolAux","1");
    System.out.println("<comparison> ==> OPEN_BRACKET <expression> <comparator> <expression> CLOSE_BRACKET");
:};

comparator ::= GREATER_THAN:value
{:
    TercetoGenerator.pilaOperadores.push(value.toString()); //[BGE,_,_]
    System.out.println("<comparator> => GREATER_THAN: " + value );
:}
| GREATER_OR_EQUAL_THAN:value
{:
    TercetoGenerator.pilaOperadores.push(value.toString()); //[BGE,_,_]
    System.out.println("<comparator> => GREATER_OR_EQUAL_THAN" + value );
:}
| LOWER_THAN:value
{:
    TercetoGenerator.pilaOperadores.push(value.toString()); //[BGE,_,_]
    System.out.println("<comparator> => LOWER_THAN" + value );
:}
| LOWER_OR_EQUAL_THAN:value
{:
    TercetoGenerator.pilaOperadores.push(value.toString()); //[BGE,_,_]
    System.out.println("<comparator> =>LOWER_OR_EQUAL_THAN: " + value );
:}
| EQUALS:value
{:
    TercetoGenerator.pilaOperadores.push(value.toString()); //[BGE,_,_]
    System.out.println("<comparator> => EQUALS: " + value );
:}
| NOT_EQUALS:value
{:
    TercetoGenerator.pilaOperadores.push(value.toString()); //[BGE,_,_]
    System.out.println("<comparator> => NOT_EQUALS: " + value );
:};

case ::= DO IDENTIFIER OPEN_CURLY_BRACES caseWrapper CLOSE_CURLY_BRACES
{:
    while(!TercetoGenerator.pilaIndices.isEmpty()) {
        Terceto tercetoBI = TercetoGenerator.tercetos.get(TercetoGenerator.pilaIndices.pop());
        tercetoBI.segundoElemento = "[" + TercetoGenerator.tercetos.size() + "]";
    }
    System.out.println("<case> ==> DO IDENTIFIER <caseWrapper> END_DO");
:};
case ::= DO IDENTIFIER OPEN_CURLY_BRACES caseWrapper defaultCase CLOSE_CURLY_BRACES
{:
    // FIXME: ¿Por que estamos haciendo que el final de todos los case salten a la primera linea del Default??
    //  deberian saltar a la ultima linea actual creo, sino al final de cada case siempre se va a ejecutar el defaultcase
    int idDefaultCase = TercetoGenerator.indices.get("DefaultCaseIndex"); //deberia ser TercetoGenerator.tercetos.size()?
    while(!TercetoGenerator.pilaIndices.isEmpty()) {
        Terceto tercetoBI = TercetoGenerator.tercetos.get(TercetoGenerator.pilaIndices.pop());
        tercetoBI.segundoElemento = "[" + TercetoGenerator.tercetos.size() + "]";
    }
    System.out.println("<case> ==> DO IDENTIFIER OPEN_CURLY_BRACES <caseWrapper>  <defaultCase> CLOSE_CURLY_BRACES");
:};
caseWrapper ::=  caseWrapper CASE comparisonCase OPEN_CURLY_BRACES program CLOSE_CURLY_BRACES
{:
    int idComp = TercetoGenerator.pilaIndices.pop();
    Terceto tercetoComp = TercetoGenerator.tercetos.get(idComp);
    int idUltimoTerceto = TercetoGenerator.tercetos.size() + 1;
    tercetoComp.segundoElemento = "[" + idUltimoTerceto + "]";
    int idTercetoBI = TercetoGenerator.getInstance().crearTerceto("BI","_","_");
    TercetoGenerator.pilaIndices.push(idTercetoBI);
    System.out.println("<caseWrapper> => <caseWrapper> CASE <comparison> OPEN_CURLY_BRACES <program> CLOSE_CURLY_BRACES");
:};
caseWrapper ::= CASE comparisonCase OPEN_CURLY_BRACES program CLOSE_CURLY_BRACES
{:
    int idComp = TercetoGenerator.pilaIndices.pop();
    Terceto tercetoComp = TercetoGenerator.tercetos.get(idComp);
    int idUltimoTerceto = TercetoGenerator.tercetos.size() + 1;
    tercetoComp.segundoElemento = "[" + idUltimoTerceto + "]";
    int idTercetoBI = TercetoGenerator.getInstance().crearTerceto("BI","_","_");
    TercetoGenerator.pilaIndices.push(idTercetoBI);
    System.out.println("<caseWrapper> => CASE <comparison>");
:};
defaultCase ::= DEFAULT OPEN_CURLY_BRACES program CLOSE_CURLY_BRACES
{:
    TercetoGenerator.getInstance().asignarTerceto("DefaultCaseIndex", "ProgramIndex");
    System.out.println("<defaultCase> => DEFAULT OPEN_CURLY_BRACES program CLOSE_CURLY_BRACES");
:};

iguales ::= IGUALES OPEN_BRACKET expression:exp
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto("=","@aux",TercetoGenerator.getInstance().obtenerTercetoDelENT("ExpressionIndex"),"Aux");
    TercetoGenerator.getInstance().apilarTerceto("Aux");
    System.out.println("Valor a comparar: " + exp);
:}
COMMA OPEN_SQUARE_BRACKET expressionList CLOSE_SQUARE_BRACKET CLOSE_BRACKET {:
  System.out.println("<iguales> => IGUALES OPEN_BRACKET <expression> COMMA OPEN_SQUARE_BRACKET <expressionList> CLOSE_SQUARE_BRACKET CLOSE_BRACKET");
  int id = TercetoGenerator.indices.get("BNE");
  id+=2;
  TercetoGenerator.pilaTercetos.pop().segundoElemento = "[" + id + "]";
    TercetoGenerator.getInstance().asignarTerceto("IgualesIndex","AuxContIndex");
:};
expressionList ::= expression
{:
    int id = TercetoGenerator.getInstance().crearYAsignarTerceto("CMP",TercetoGenerator.getInstance().obtenerTercetoDelENT("Aux"),TercetoGenerator.getInstance().obtenerTercetoDelENT("ExpressionIndex"),"CMP");
    TercetoGenerator.getInstance().asignarTerceto("ExpressionListIndex", "ExpressionIndex");
    TercetoGenerator.getInstance().crearYAsignarTerceto("BNE","","_","BNE");
    TercetoGenerator.getInstance().crearYAsignarTerceto("+","@Cont","1","AuxContIndex");
    TercetoGenerator.getInstance().apilarTerceto("BNE");
    System.out.println("<expressionList> ==> <expression>");
:};
expressionList ::= expressionList COMMA expression:exp 
{:

    int id = TercetoGenerator.getInstance().crearYAsignarTerceto("CMP",TercetoGenerator.getInstance().obtenerTercetoDelENT("Aux"),TercetoGenerator.getInstance().obtenerTercetoDelENT("ExpressionIndex"),"CMP");
    id--;
    //verificar si hay algo en pila, desapilar y agregar el terceto
    if(!TercetoGenerator.pilaTercetos.isEmpty()) {
        TercetoGenerator.pilaTercetos.pop().segundoElemento = "[" + id + "]";
    }
    TercetoGenerator.getInstance().crearYAsignarTerceto("BNE","","_","BNE");
    TercetoGenerator.getInstance().crearYAsignarTerceto("+","@Cont","1","AuxContIndex");
    TercetoGenerator.getInstance().apilarTerceto("BNE");
    System.out.println("<expressionList> ==> <expressionList> COMMA <expression>");
:};

write ::= WRITE OPEN_BRACKET factor CLOSE_BRACKET
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto("WRITE",TercetoGenerator.getInstance().obtenerTercetoDelENT("FactorIndex"),"_","WriteIndex");
    //TercetoGenerator.getInstance().asignarTerceto("WriteIndex", "FactorIndex");
    System.out.println("<write> => WRITE OPEN_BRACKET <factor> CLOSE_BRACKET");
:};
write ::= WRITE OPEN_BRACKET string CLOSE_BRACKET
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto("WRITE",TercetoGenerator.getInstance().obtenerTercetoDelENT("StringIndex"),"_","WriteIndex");
    //TercetoGenerator.getInstance().asignarTerceto("WriteIndex", "StringIndex");
    System.out.println("<write> => WRITE OPEN_BRACKET <string> CLOSE_BRACKET");
:};
read ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto("READ",id,"_","ReadIndex");
    System.out.println("<read> => READ OPEN_BRACKET IDENTIFIER: " + id + " CLOSE_BRACKET");
:};

assignment ::= IDENTIFIER:id ASSIG:asig {:TercetoGenerator.esAsignacion = true;:} expression
{:
    SymbolTableGenerator stg = new SymbolTableGenerator();
    while(!TercetoGenerator.pilaOperandos.isEmpty()) {
        String opName = TercetoGenerator.pilaOperandos.pop();
        if(!stg.assertSameType(id.toString(),opName)) {
            throw new IncompatibleTypeException("No se puede castear variable: '" + id.toString() + "' a " + opName.replace("_","") + " en asignacion");
            //System.out.println("No se puede castear variable: '" + id.toString() + "' a " + opName.replace("_","") + " en asignacion");
        }
    }
    TercetoGenerator.esAsignacion = false;
    TercetoGenerator.getInstance().crearYAsignarTerceto(asig,id,TercetoGenerator.getInstance().obtenerTercetoDelENT("ExpressionIndex"),"AssignmentIndex");
    System.out.println("<assignment> => IDENTIFIER ASSIG <expression>");
:};
assignment ::= IDENTIFIER:id ASSIG:asig {:TercetoGenerator.esAsignacion = true;:} string
{:
    SymbolTableGenerator stg = new SymbolTableGenerator();
    if(!stg.isString(id.toString())) {
        throw new IncompatibleTypeException("No se puede castear variable " + id.toString() + " a tipo String ");
    }
    TercetoGenerator.esAsignacion = false;
    TercetoGenerator.getInstance().crearYAsignarTerceto(asig,id,TercetoGenerator.getInstance().obtenerTercetoDelENT("StringIndex"),"AssignmentIndex");
    System.out.println("<assignment> => IDENTIFIER ASSIG <string>");
:};
expression ::= expression PLUS:operador term
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto(operador,TercetoGenerator.getInstance().obtenerTercetoDelENT("ExpressionIndex"),TercetoGenerator.getInstance().obtenerTercetoDelENT("TermIndex"),"ExpressionIndex");
    System.out.println("<expression> => <expression> PLUS <term>");
:};
expression ::= expression SUB:operador term
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto(operador,TercetoGenerator.getInstance().obtenerTercetoDelENT("ExpressionIndex"),TercetoGenerator.getInstance().obtenerTercetoDelENT("TermIndex"),"ExpressionIndex");
    System.out.println("<expression> => <expression> SUB <term>");
:};
expression ::= term
{:
    TercetoGenerator.getInstance().asignarTerceto("ExpressionIndex","TermIndex");
    System.out.println("<expression> => <term>");
:};
term ::= term MULT:operador factor
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto(operador,TercetoGenerator.getInstance().obtenerTercetoDelENT("TermIndex"),TercetoGenerator.getInstance().obtenerTercetoDelENT("FactorIndex"),"TermIndex");
    System.out.println("<term> => <term> MULT <factor>");
:};
term ::= term DIV:operador factor
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto(operador,TercetoGenerator.getInstance().obtenerTercetoDelENT("TermIndex"),TercetoGenerator.getInstance().obtenerTercetoDelENT("FactorIndex"),"TermIndex");
    System.out.println("<term> => <term> DIV <factor>");
:};
term ::= factor
{:
    TercetoGenerator.getInstance().asignarTerceto("TermIndex","FactorIndex");
    System.out.println("<term> => <factor>");
:};
factor ::= IDENTIFIER:id
{:
    if(TercetoGenerator.esAsignacion == true) {
        TercetoGenerator.pilaOperandos.push(id.toString());
    }
    TercetoGenerator.getInstance().crearYAsignarTerceto(id,"FactorIndex");
    System.out.println("<factor> => IDENTIFIER " + id);
:};
factor ::= INTEGER_CONSTANT:constant
{:
    if(TercetoGenerator.esAsignacion == true) {
        TercetoGenerator.pilaOperandos.push("_" + constant.toString());
    }
    TercetoGenerator.getInstance().crearYAsignarTerceto(constant,"FactorIndex");
    System.out.println("<factor> => INTEGER_CONSTANT " + constant );
:};

factor ::= FLOAT_CONSTANT:constant
{:
    TercetoGenerator.pilaOperandos.push("_" + constant.toString());
    TercetoGenerator.getInstance().crearYAsignarTerceto(constant,"FactorIndex");
    System.out.println("<factor> => FLOAT_CONSTANT" + constant );
:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET
{:
    TercetoGenerator.getInstance().asignarTerceto("FactorIndex","ExpressionIndex");
    System.out.println("<factor> => OPEN_BRACKET <expression> CLOSE_BRACKET");
:};
factor ::= iguales
{:
    TercetoGenerator.getInstance().asignarTerceto("FactorIndex","IgualesIndex");
    System.out.println("<factor> => <iguales>");
:};
string ::= CONST_STRING:constant
{:
    TercetoGenerator.getInstance().crearYAsignarTerceto(constant, "StringIndex");
    System.out.println("<string> => CONST_STRING " + constant);
:};